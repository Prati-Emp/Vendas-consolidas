#!/usr/bin/env python3
"""
Atualiza√ß√£o completa do MotherDuck (agendada pelo GitHub Actions)
Reutiliza o pipeline de sistema_completo.py para garantir consist√™ncia.
"""

import asyncio
import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# Garante import do projeto quando rodar via Actions
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

def main():
    """Fun√ß√£o principal para execu√ß√£o via GitHub Actions"""
    print("üåô INICIANDO ATUALIZA√á√ÉO DO MOTHERDUCK (MADRUGADA)")
    print("=" * 60)
    print(f"‚è∞ Timestamp: {datetime.now()}")
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ Working directory: {os.getcwd()}")
    
    # Carregar vari√°veis de ambiente (√∫til para desenvolvimento local)
    load_dotenv()
    
    # Verificar vari√°veis cr√≠ticas
    required_vars = ['MOTHERDUCK_TOKEN', 'CVCRM_EMAIL', 'CVCRM_TOKEN', 'SIENGE_TOKEN']
    missing_vars = [var for var in required_vars if not os.environ.get(var)]
    
    if missing_vars:
        print(f"‚ùå Vari√°veis de ambiente faltando: {', '.join(missing_vars)}")
        sys.exit(1)
    
    print("‚úÖ Todas as vari√°veis de ambiente est√£o configuradas")
    
    try:
        # Importar o sistema completo
        from sistema_completo import sistema_completo
        
        print("\nüöÄ Executando pipeline completo de atualiza√ß√£o...")
        # Permitir pausar canceladas via env (para economizar requisi√ß√µes)
        # Quando SIENGE_SKIP_CANCELADAS=true, vamos for√ßar retorno vazio para canceladas
        if os.environ.get('SIENGE_SKIP_CANCELADAS', 'false').lower() == 'true':
            os.environ['SIENGE_APENAS_REALIZADAS'] = 'true'
        
        # Executar com timeout de 15 minutos
        sucesso = asyncio.run(asyncio.wait_for(sistema_completo(), timeout=900.0))
        
        if sucesso:
            print("\n‚úÖ ATUALIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("üåê Dados atualizados no MotherDuck")
            print("üìä Dashboard pode ser consultado para valida√ß√£o")
            sys.exit(0)
        else:
            print("\n‚ùå FALHA NA ATUALIZA√á√ÉO")
            print("üîç Verifique os logs acima para detalhes")
            sys.exit(1)
            
    except asyncio.TimeoutError:
        print("\n‚è∞ TIMEOUT - Opera√ß√£o demorou mais de 15 minutos")
        print("üîç Considere otimizar o pipeline ou aumentar o timeout")
        sys.exit(1)
        
    except ImportError as e:
        print(f"\n‚ùå ERRO DE IMPORTA√á√ÉO: {e}")
        print("üîç Verifique se todos os m√≥dulos est√£o dispon√≠veis")
        sys.exit(1)
        
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        print("üîç Verifique a configura√ß√£o e conectividade")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
