#!/usr/bin/env python3
"""
An√°lises Poss√≠veis com os Dados de CV Repasses
Baseado na estrutura da tabela cv_repasses corrigida
"""

import os
import duckdb
import pandas as pd
from dotenv import load_dotenv

def conectar_motherduck():
    """Conecta ao banco MotherDuck"""
    load_dotenv('motherduck_config.env')
    
    token = os.environ.get('MOTHERDUCK_TOKEN', '').strip()
    if not token:
        raise ValueError("MOTHERDUCK_TOKEN nao encontrado")
    
    # Configurar DuckDB
    duckdb.sql("INSTALL motherduck")
    duckdb.sql("LOAD motherduck")
    duckdb.sql(f"SET motherduck_token='{token}'")
    
    # Conectar
    conn = duckdb.connect('md:reservas')
    return conn

def explorar_estrutura_dados():
    """Explora a estrutura dos dados para identificar possibilidades de an√°lise"""
    print("EXPLORANDO ESTRUTURA DOS DADOS - CV_REPASSES")
    print("="*60)
    
    conn = conectar_motherduck()
    
    try:
        # Obter estrutura da tabela
        print("1. ESTRUTURA DA TABELA:")
        print("-" * 40)
        columns = conn.execute("DESCRIBE main.cv_repasses").fetchall()
        for col in columns:
            print(f"  - {col[0]} ({col[1]})")
        
        # Contar registros
        total = conn.execute("SELECT COUNT(*) FROM main.cv_repasses").fetchone()[0]
        print(f"\nTotal de registros: {total:,}")
        
        # Explorar colunas categ√≥ricas
        print("\n2. COLUNAS CATEG√ìRICAS DISPON√çVEIS:")
        print("-" * 40)
        
        colunas_categoricas = [
            'Para', 'empreendimento', 'regiao', 'correspondente', 
            'situacao', 'contrato_quitado', 'contrato_liquidado',
            'recebendo_financiamento', 'itbi_pago', 'laudemio_pago'
        ]
        
        for col in colunas_categoricas:
            try:
                valores_unicos = conn.execute(f"""
                    SELECT {col}, COUNT(*) as count
                    FROM main.cv_repasses 
                    WHERE {col} IS NOT NULL
                    GROUP BY {col}
                    ORDER BY count DESC
                    LIMIT 5
                """).fetchall()
                
                if valores_unicos:
                    print(f"\n{col.upper()}:")
                    for valor, count in valores_unicos:
                        print(f"  - {valor}: {count} registros")
            except:
                print(f"\n{col.upper()}: Erro ao consultar")
        
        # Explorar colunas num√©ricas
        print("\n3. COLUNAS NUM√âRICAS DISPON√çVEIS:")
        print("-" * 40)
        
        colunas_numericas = [
            'valor_contrato', 'valor_previsto', 'valor_divida', 
            'valor_subsidio', 'valor_fgts', 'valor_financiado'
        ]
        
        for col in colunas_numericas:
            try:
                stats = conn.execute(f"""
                    SELECT 
                        COUNT(*) as total,
                        ROUND(AVG({col}), 2) as media,
                        ROUND(MIN({col}), 2) as minimo,
                        ROUND(MAX({col}), 2) as maximo,
                        ROUND(SUM({col}), 2) as total_soma
                    FROM main.cv_repasses 
                    WHERE {col} IS NOT NULL
                """).fetchone()
                
                if stats[0] > 0:
                    print(f"\n{col.upper()}:")
                    print(f"  - Total: {stats[0]:,} registros")
                    print(f"  - M√©dia: R$ {stats[1]:,.2f}")
                    print(f"  - M√≠nimo: R$ {stats[2]:,.2f}")
                    print(f"  - M√°ximo: R$ {stats[3]:,.2f}")
                    print(f"  - Soma total: R$ {stats[4]:,.2f}")
            except:
                print(f"\n{col.upper()}: Erro ao consultar")
        
        # Explorar colunas de data
        print("\n4. COLUNAS DE DATA DISPON√çVEIS:")
        print("-" * 40)
        
        colunas_data = [
            'data_cad', 'data_venda', 'data_contrato_contabilizado',
            'data_assinatura_de_contrato', 'data_cadastro'
        ]
        
        for col in colunas_data:
            try:
                range_datas = conn.execute(f"""
                    SELECT 
                        MIN({col}) as data_minima,
                        MAX({col}) as data_maxima,
                        COUNT(*) as registros_com_data
                    FROM main.cv_repasses 
                    WHERE {col} IS NOT NULL
                """).fetchone()
                
                if range_datas[2] > 0:
                    print(f"\n{col.upper()}:")
                    print(f"  - Per√≠odo: {range_datas[0]} a {range_datas[1]}")
                    print(f"  - Registros: {range_datas[2]:,}")
            except:
                print(f"\n{col.upper()}: Erro ao consultar")
        
        return True
        
    except Exception as e:
        print(f"Erro: {e}")
        return False
    finally:
        conn.close()

def identificar_analises_possiveis():
    """Identifica as an√°lises poss√≠veis baseadas na estrutura dos dados"""
    print("\n" + "="*60)
    print("AN√ÅLISES POSS√çVEIS COM OS DADOS DE CV_REPASSES")
    print("="*60)
    
    print("\nüìä 1. AN√ÅLISES POR STATUS (Coluna 'Para'):")
    print("   - Distribui√ß√£o por status atual")
    print("   - Evolu√ß√£o temporal dos status")
    print("   - Tempo m√©dio em cada status")
    print("   - An√°lise de gargalos no processo")
    print("   - Identifica√ß√£o de contratos 'presos'")
    
    print("\nüè¢ 2. AN√ÅLISES POR EMPREENDIMENTO:")
    print("   - Performance por empreendimento")
    print("   - Ranking de empreendimentos por valor")
    print("   - An√°lise de velocidade de vendas")
    print("   - Compara√ß√£o entre projetos")
    print("   - An√°lise por regi√£o")
    
    print("\nüí∞ 3. AN√ÅLISES FINANCEIRAS:")
    print("   - An√°lise de valores de contrato")
    print("   - Distribui√ß√£o por faixas de valor")
    print("   - An√°lise de subs√≠dios e financiamentos")
    print("   - Compara√ß√£o valor previsto vs realizado")
    print("   - An√°lise de inadimpl√™ncia")
    
    print("\nüë• 4. AN√ÅLISES DE CLIENTES:")
    print("   - Perfil demogr√°fico dos clientes")
    print("   - An√°lise por cidade/regi√£o")
    print("   - Segmenta√ß√£o de clientes")
    print("   - An√°lise de comportamento de compra")
    
    print("\nüìÖ 5. AN√ÅLISES TEMPORAIS:")
    print("   - Vendas por per√≠odo (mensal, trimestral)")
    print("   - Sazonalidade dos neg√≥cios")
    print("   - An√°lise de crescimento")
    print("   - Tend√™ncias temporais")
    print("   - An√°lise de picos e vales")
    
    print("\nüîÑ 6. AN√ÅLISES DE PROCESSO:")
    print("   - Tempo m√©dio de processamento")
    print("   - An√°lise de etapas do processo")
    print("   - Identifica√ß√£o de gargalos")
    print("   - Efici√™ncia por correspondente")
    print("   - An√°lise de documenta√ß√£o")
    
    print("\nüìà 7. AN√ÅLISES DE PERFORMANCE:")
    print("   - KPIs de processamento")
    print("   - Taxa de convers√£o por status")
    print("   - An√°lise de retrabalho")
    print("   - Benchmarking interno")
    print("   - An√°lise de qualidade")
    
    print("\nüéØ 8. AN√ÅLISES ESPEC√çFICAS:")
    print("   - An√°lise de contratos quitados vs liquidados")
    print("   - An√°lise de financiamento")
    print("   - An√°lise de ITBI e laud√™mio")
    print("   - An√°lise de correspondentes")
    print("   - An√°lise de documenta√ß√£o pendente")

def exemplos_queries_uteis():
    """Mostra exemplos de queries √∫teis para an√°lises"""
    print("\n" + "="*60)
    print("EXEMPLOS DE QUERIES √öTEIS")
    print("="*60)
    
    queries = {
        "Status por Empreendimento": """
        SELECT 
            empreendimento,
            Para,
            COUNT(*) as quantidade,
            ROUND(SUM(valor_contrato), 2) as valor_total
        FROM main.cv_repasses
        GROUP BY empreendimento, Para
        ORDER BY empreendimento, valor_total DESC
        """,
        
        "Top 10 Maiores Valores": """
        SELECT 
            empreendimento,
            cliente,
            valor_contrato,
            Para,
            data_venda
        FROM main.cv_repasses
        ORDER BY valor_contrato DESC
        LIMIT 10
        """,
        
        "An√°lise Temporal": """
        SELECT 
            EXTRACT(YEAR FROM data_venda) as ano,
            EXTRACT(MONTH FROM data_venda) as mes,
            COUNT(*) as total_contratos,
            ROUND(SUM(valor_contrato), 2) as valor_total
        FROM main.cv_repasses
        WHERE data_venda IS NOT NULL
        GROUP BY EXTRACT(YEAR FROM data_venda), EXTRACT(MONTH FROM data_venda)
        ORDER BY ano DESC, mes DESC
        """,
        
        "Performance por Regi√£o": """
        SELECT 
            regiao,
            COUNT(*) as total_contratos,
            ROUND(AVG(valor_contrato), 2) as valor_medio,
            ROUND(SUM(valor_contrato), 2) as valor_total
        FROM main.cv_repasses
        WHERE regiao IS NOT NULL
        GROUP BY regiao
        ORDER BY valor_total DESC
        """,
        
        "An√°lise de Financiamento": """
        SELECT 
            recebendo_financiamento,
            COUNT(*) as quantidade,
            ROUND(AVG(valor_contrato), 2) as valor_medio,
            ROUND(SUM(valor_contrato), 2) as valor_total
        FROM main.cv_repasses
        GROUP BY recebendo_financiamento
        ORDER BY quantidade DESC
        """
    }
    
    for titulo, query in queries.items():
        print(f"\n{titulo}:")
        print("-" * 40)
        print(query)

def main():
    """Fun√ß√£o principal"""
    print("AN√ÅLISES POSS√çVEIS - CV_REPASSES")
    print("="*60)
    
    try:
        # Explorar estrutura dos dados
        if explorar_estrutura_dados():
            # Identificar an√°lises poss√≠veis
            identificar_analises_possiveis()
            
            # Mostrar exemplos de queries
            exemplos_queries_uteis()
            
            print("\n" + "="*60)
            print("CONCLUS√ÉO")
            print("="*60)
            print("Com os dados de CV Repasses, voc√™ pode fazer an√°lises muito ricas!")
            print("Os dados incluem informa√ß√µes sobre:")
            print("- Status de contratos e repasses")
            print("- Valores financeiros detalhados")
            print("- Informa√ß√µes de clientes e empreendimentos")
            print("- Dados temporais para an√°lise de tend√™ncias")
            print("- Informa√ß√µes de processo e documenta√ß√£o")
            print("\nRecomendo come√ßar com an√°lises de status e performance por empreendimento!")
        
    except Exception as e:
        print(f"Erro durante a an√°lise: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

